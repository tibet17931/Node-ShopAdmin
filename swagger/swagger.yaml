tags:
  - name: Auth
    description: The authentication process always runs at the start of the application, before the permission and throttling checks occur
  - name: Hello
    description: Greetings API from TheCodeBUzz
path:
  /login:
    post:
      tags:
        - Auth
      summary: Get greeting message from TheCodebuzz
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 8
                  maxLength: 50
                  description: User ID String min 8
                  example: "yeenEiEi"
                password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  writeOnly: true
                  description: Password is a Secret
                  example: "************"
      responses:
        200:
          # $ref: "#/components/responses/Success200"
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: number
                    description: HTTP reponse code
                    example: 200
                  message:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        205:
          $ref: "#/components/responses/BodyWarning"
  /registor:
    post:
      tags:
        - Auth
      summary: Registor user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - email
                - birthday
                - phone
              properties:
                username:
                  type: string
                  minLength: 8
                  maxLength: 50
                  description: User ID String min 8
                  example: "yeenEiEi"
                password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  writeOnly: true
                  description: Password is a Secret
                  example: "************"
                firstname:
                  type: string
                  description: Your firstname name
                  example: Chris
                lastname:
                  type: string
                  description: Your lastname name
                  example: Chris
                email:
                  type: string
                  format: email
                  description: Your email @
                  example: "tibet_17931@hotmail.com"
                birthday:
                  type: string
                  format: date
                phone:
                  type: string
                  pattern: "^[a-zA-Z0-9ก-๙ ,'$!%&_/\\-\\(\\)\\.\\?\\\\\\*\\+]*$"
                  maxLength: 12
                  description: Mobile Phone
                  example: "083-234-5678"
                avatar:
                  type: string
                  description: Base64
      responses:
        200:
          # $ref: "#/components/responses/Success200"
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: number
                    description: HTTP reponse code
                    example: 200
                  message:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
  /getProfile:
    get:
      tags:
        - Auth
      summary: Get profile from database
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          schema:
            type: string
            format: email
            description: Your email @
            example: "tibet_17931@hotmail.com"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: number
                    description: HTTP reponse code
                    example: 200
                  message:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  schemas:
    $ref: "swagger/schemas.yaml"
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  requestBodies:
    BodyTemp:
      description: Property 'attrs' can have {} or [] format
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BodySchema"
  responses:
    Success200:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    Success201:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    Success204:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    BadRequest:
      description: 400 - Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: 401 - Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: 500 - Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServiceUnavailable:
      description: 503 - Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BodySuccess:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Success"
    BodyWarning:
      description: Warning
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Warning"
